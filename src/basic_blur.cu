#include <cuda.h>
#include <stdint.h>
#include "basic_blur.h"

const float kernel[21 * 21] = {
0.002179, 0.002192, 0.002204, 0.002214, 0.002223, 0.002231, 0.002237, 0.002242, 0.002246, 0.002248, 0.002248, 0.002248, 0.002246, 0.002242, 0.002237, 0.002231, 0.002223, 0.002214, 0.002204, 0.002192, 0.002179,
0.002192, 0.002205, 0.002217, 0.002228, 0.002237, 0.002244, 0.002251, 0.002256, 0.002259, 0.002261, 0.002262, 0.002261, 0.002259, 0.002256, 0.002251, 0.002244, 0.002237, 0.002228, 0.002217, 0.002205, 0.002192,
0.002204, 0.002217, 0.002229, 0.002239, 0.002249, 0.002256, 0.002263, 0.002268, 0.002271, 0.002273, 0.002274, 0.002273, 0.002271, 0.002268, 0.002263, 0.002256, 0.002249, 0.002239, 0.002229, 0.002217, 0.002204,
0.002214, 0.002228, 0.002239, 0.00225, 0.002259, 0.002267, 0.002273, 0.002278, 0.002282, 0.002284, 0.002285, 0.002284, 0.002282, 0.002278, 0.002273, 0.002267, 0.002259, 0.00225, 0.002239, 0.002228, 0.002214,
0.002223, 0.002237, 0.002249, 0.002259, 0.002268, 0.002276, 0.002282, 0.002287, 0.002291, 0.002293, 0.002294, 0.002293, 0.002291, 0.002287, 0.002282, 0.002276, 0.002268, 0.002259, 0.002249, 0.002237, 0.002223,
0.002231, 0.002244, 0.002256, 0.002267, 0.002276, 0.002284, 0.00229, 0.002295, 0.002299, 0.002301, 0.002302, 0.002301, 0.002299, 0.002295, 0.00229, 0.002284, 0.002276, 0.002267, 0.002256, 0.002244, 0.002231,
0.002237, 0.002251, 0.002263, 0.002273, 0.002282, 0.00229, 0.002297, 0.002302, 0.002305, 0.002308, 0.002308, 0.002308, 0.002305, 0.002302, 0.002297, 0.00229, 0.002282, 0.002273, 0.002263, 0.002251, 0.002237,
0.002242, 0.002256, 0.002268, 0.002278, 0.002287, 0.002295, 0.002302, 0.002307, 0.00231, 0.002313, 0.002313, 0.002313, 0.00231, 0.002307, 0.002302, 0.002295, 0.002287, 0.002278, 0.002268, 0.002256, 0.002242,
0.002246, 0.002259, 0.002271, 0.002282, 0.002291, 0.002299, 0.002305, 0.00231, 0.002314, 0.002316, 0.002317, 0.002316, 0.002314, 0.00231, 0.002305, 0.002299, 0.002291, 0.002282, 0.002271, 0.002259, 0.002246,
0.002248, 0.002261, 0.002273, 0.002284, 0.002293, 0.002301, 0.002308, 0.002313, 0.002316, 0.002318, 0.002319, 0.002318, 0.002316, 0.002313, 0.002308, 0.002301, 0.002293, 0.002284, 0.002273, 0.002261, 0.002248,
0.002248, 0.002262, 0.002274, 0.002285, 0.002294, 0.002302, 0.002308, 0.002313, 0.002317, 0.002319, 0.00232, 0.002319, 0.002317, 0.002313, 0.002308, 0.002302, 0.002294, 0.002285, 0.002274, 0.002262, 0.002248,
0.002248, 0.002261, 0.002273, 0.002284, 0.002293, 0.002301, 0.002308, 0.002313, 0.002316, 0.002318, 0.002319, 0.002318, 0.002316, 0.002313, 0.002308, 0.002301, 0.002293, 0.002284, 0.002273, 0.002261, 0.002248,
0.002246, 0.002259, 0.002271, 0.002282, 0.002291, 0.002299, 0.002305, 0.00231, 0.002314, 0.002316, 0.002317, 0.002316, 0.002314, 0.00231, 0.002305, 0.002299, 0.002291, 0.002282, 0.002271, 0.002259, 0.002246,
0.002242, 0.002256, 0.002268, 0.002278, 0.002287, 0.002295, 0.002302, 0.002307, 0.00231, 0.002313, 0.002313, 0.002313, 0.00231, 0.002307, 0.002302, 0.002295, 0.002287, 0.002278, 0.002268, 0.002256, 0.002242,
0.002237, 0.002251, 0.002263, 0.002273, 0.002282, 0.00229, 0.002297, 0.002302, 0.002305, 0.002308, 0.002308, 0.002308, 0.002305, 0.002302, 0.002297, 0.00229, 0.002282, 0.002273, 0.002263, 0.002251, 0.002237,
0.002231, 0.002244, 0.002256, 0.002267, 0.002276, 0.002284, 0.00229, 0.002295, 0.002299, 0.002301, 0.002302, 0.002301, 0.002299, 0.002295, 0.00229, 0.002284, 0.002276, 0.002267, 0.002256, 0.002244, 0.002231,
0.002223, 0.002237, 0.002249, 0.002259, 0.002268, 0.002276, 0.002282, 0.002287, 0.002291, 0.002293, 0.002294, 0.002293, 0.002291, 0.002287, 0.002282, 0.002276, 0.002268, 0.002259, 0.002249, 0.002237, 0.002223,
0.002214, 0.002228, 0.002239, 0.00225, 0.002259, 0.002267, 0.002273, 0.002278, 0.002282, 0.002284, 0.002285, 0.002284, 0.002282, 0.002278, 0.002273, 0.002267, 0.002259, 0.00225, 0.002239, 0.002228, 0.002214,
0.002204, 0.002217, 0.002229, 0.002239, 0.002249, 0.002256, 0.002263, 0.002268, 0.002271, 0.002273, 0.002274, 0.002273, 0.002271, 0.002268, 0.002263, 0.002256, 0.002249, 0.002239, 0.002229, 0.002217, 0.002204,
0.002192, 0.002205, 0.002217, 0.002228, 0.002237, 0.002244, 0.002251, 0.002256, 0.002259, 0.002261, 0.002262, 0.002261, 0.002259, 0.002256, 0.002251, 0.002244, 0.002237, 0.002228, 0.002217, 0.002205, 0.002192,
0.002179, 0.002192, 0.002204, 0.002214, 0.002223, 0.002231, 0.002237, 0.002242, 0.002246, 0.002248, 0.002248, 0.002248, 0.002246, 0.002242, 0.002237, 0.002231, 0.002223, 0.002214, 0.002204, 0.002192, 0.002179
};

__global__ void kernGaussianBlur(int width, int height, uint8_t * dst, uint8_t * src, int kernSize, float * kernel) {
	int x = (blockIdx.x * blockDim.x) + threadIdx.x;
	int y = (blockIdx.y * blockDim.y) + threadIdx.y;
	if (x >= width || y >= height) {
		return;
	}
	
	float r, g, b;
	r = g = b = 0.0;
	for (int i = 0; i < kernSize; i++) {
		int tx = x + i - kernSize/2;
		for (int j = 0; j < kernSize; j++) {
			int ty = y + j - kernSize/2;
			if (tx >= 0 && ty >= 0 && tx < width && ty < height) {
				r += src[(ty * width + tx) * 3] * kernel[j * kernSize + i];
				g += src[(ty * width + tx) * 3 + 1] * kernel[j * kernSize + i];
				b += src[(ty * width + tx) * 3 + 2] * kernel[j * kernSize + i];
			}
		}
	}
	int idx = 3 * (y * width + x);
	dst[idx] = r;
	dst[idx + 1] = g;
	dst[idx + 2] = b;
	return;
}

BasicBlur::BasicBlur(int width, int height) {
  this->width = width;
  this->height = height;
  int sz = sizeof(uint8_t) * width * height * 3;
  cudaMalloc(&this->dev_src, sz);
  cudaMalloc(&this->dev_dst, sz);
	this->kernSize = 21;
	cudaMalloc(&this->dev_kernel, this->kernSize * this->kernSize * sizeof(float));
	cudaMemcpy(this->dev_kernel, kernel, this->kernSize * this->kernSize * sizeof(float), cudaMemcpyHostToDevice);
}

BasicBlur::~BasicBlur() {
  cudaFree(this->dev_src);
  cudaFree(this->dev_dst);
	cudaFree(this->dev_kernel);
}

AVPixelFormat BasicBlur::getPixelFormat() {
  return AV_PIX_FMT_RGB24;
}

int BasicBlur::processFrame(uint8_t * frame) {
  int sz = sizeof(uint8_t) * this->width * this->height * 3;
  cudaMemcpy(this->dev_src, frame, sz, cudaMemcpyHostToDevice);

  const dim3 blockSize2d(8, 8);
	const dim3 blocksPerGrid2d(
		(this->width + blockSize2d.x - 1) / blockSize2d.x,
		(this->height + blockSize2d.y - 1) / blockSize2d.y);
	
	kernGaussianBlur<<<blocksPerGrid2d, blockSize2d>>>(this->width, this->height, this->dev_dst, this->dev_src, this->kernSize, this->dev_kernel);
	cudaDeviceSynchronize();
	cudaMemcpy(frame, this->dev_dst, sz, cudaMemcpyDeviceToHost);
  return 0;
}

